/* MAIN.C file
 * 
 * Copyright (c) 2002-2005 STMicroelectronics
 */

#include "STM8S.h"


#define MENU_MOD	1
#define STD_MOD		0

#define ON_LED		0x10
#define OFF_LED		0x40
#define STA_LED		0x01

#define UP_BUTT			(1<<1)
#define DOWN_BUTT 	(1<<2)
#define LOCK_BUTT		(1<<3)
#define T_UP_BUTT		(1<<4)
#define T_DOWN_BUTT (1<<5)


#define LED_ON_DIS	0x20
#define LED_STR_DIS	0x08
#define LED_OFF_DIS	0x80

#define ON					1
#define OFF					0

#define SEC_1				1000

#define LOCK_TIMMING					400			// 2Sec
#define LONG_KEY_TIMMING			200			// 1Sec

unsigned int timer_cnt_kkh;
unsigned char Mod_select;


/****************DISPLAY***********/
unsigned char data_temp[4]; 
unsigned char	data_temp_two[4];
unsigned char Disp_point;
unsigned char buf_small[4];

unsigned char buf_big[4];
unsigned char LED_disp;



/****************KEY***********/
unsigned char Real_key;
unsigned int Key_cnt;
unsigned char Button_val, BB;

/*************MENU control*************/
unsigned char menu_info;
unsigned char kkh_test_mode_flag, act;


/************SYSTEM*******************/
unsigned int on_timer_set_flag;
int on_timer, off_timer;
int real_cnt_on, real_cnt_off;
unsigned char KEY_LOCK_FLAG;







/*-----------------------------------------------------------------------------------------------------*/

void delay_cycles(register unsigned short value)
{
	_asm("nop\n $N:\n decw X\n jrne $L\n nop\n ", value);
}

void delay_ms(unsigned int  value)
{
	while(value--);
}

void clock_setup(void)
{
	CLK_DeInit();	
	CLK_HSECmd(ENABLE); 																			//External High Speed oscillator (HSE).
	
	CLK_HSICmd(DISABLE); 																			//Internal High Speed oscillator (HSI).
	CLK_LSICmd(DISABLE); 																			//Internal Low Speed oscillator (LSI)
	CLK_CCOCmd(DISABLE); 																			//Configurable Clock Output (CCO).
	
	CLK_SlowActiveHaltWakeUpCmd(DISABLE); 										//Configures the slow active halt wake up
	while(CLK_GetFlagStatus(CLK_FLAG_HSERDY == FALSE));       //High speed external oscillator ready Flag) 
																														// Checks whether the specified CLK flag is set or not.
	CLK_ClockSwitchCmd(ENABLE); 															//Starts or Stops manually the clock switch execution.
	CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSE, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
																														//configures the Switch from one clock to another
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);		//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C, DISABLE);		//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC, DISABLE);		//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);		//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART1, DISABLE);	//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2, DISABLE);	//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART3, DISABLE);	//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3, ENABLE);	//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, DISABLE);//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER5, DISABLE);//Enables or disables the specified peripheral CLK.
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER6, DISABLE);//Enables or disables the specified peripheral CLK.
	
}

void GPIO_setup(void)
{
	GPIO_DeInit(GPIOA);
	GPIO_DeInit(GPIOB);
	GPIO_DeInit(GPIOC);
	GPIO_DeInit(GPIOD);
	GPIO_DeInit(GPIOE);
	
	GPIO_Init(GPIOC, (GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1), GPIO_MODE_OUT_PP_HIGH_FAST);
	GPIO_Init(GPIOA, (GPIO_PIN_3), GPIO_MODE_OUT_PP_HIGH_FAST);
	
	GPIO_Init(GPIOA, (GPIO_PIN_4), GPIO_MODE_IN_PU_NO_IT);
	
	GPIO_Init(GPIOB, (GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0), GPIO_MODE_OUT_PP_HIGH_FAST);
	GPIO_Init(GPIOD, (GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | /*GPIO_PIN_1//SWIM*/ GPIO_PIN_0), GPIO_MODE_OUT_PP_HIGH_FAST);
	GPIO_Init(GPIOE, (GPIO_PIN_7 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0), GPIO_MODE_OUT_PP_HIGH_FAST);
	
	GPIO_Init(GPIOE, (GPIO_PIN_6), GPIO_MODE_IN_PU_NO_IT);
}

void Timer3_Set(void)
{
	CLK->PCKENR1 |= CLK_PERIPHERAL_TIMER3;    								//카운터 3번에 clock
	TIM3->PSCR = TIM3_PRESCALER_16;        										// 16000000 / 16 = 1000000
																														///////1000 = 0x03E8 == 1ms
	TIM3->ARRH = 0x03;
	TIM3->ARRL = 0xE8;
	
	TIM3->SR1 = 0xFE;																					//인터럽트 플레이그 클리어
	TIM3->IER |= 0x01;    																		//인터럽트 업데이트
	TIM3->CR1 |= 0x01;    																		//카운터 이네이블
	
	enableInterrupts();
}

const unsigned char NUMBER_TO_DATA[]=
{
		0XFC, // 0.   
		0X60, // 1.
		0XDA, // 2.
		0XF2, // 3.
		0X66, // 4.
		0XB6, // 5.
		0XBE, // 6.
		0XE0, // 7.
		0XFE, // 8.
		0XF6, // 9.
		0x00, // null //10
		
		0XEE, // A    //11
		0X3E, // B
		0X1A, // C
		0X7A, // D
		0X9E, // E
		0X8E, // F
		0XBC, // G
		0X6E, // H
		0X0C, // I
		0X78, // J
		0X5E, // K
		0X1C, // L
		0XAA, // M
		0X2A, // N
		0X3A, // O
		0XCE, // P
		0XE6, // Q
		0X0A, // R
		0XB6, // S
		0X1E, // T
		0X38, // U
		0X7E, // V
		0X56, // W
		0X6C, // X
		0X76, // Y
		0X92 // Z
		
};



unsigned char KKH_KEY(unsigned char addr)
{
	
	if(GPIOE->IDR & (1<<6))
	{
		if(addr == 0)Button_val = T_DOWN_BUTT;
		else if(addr == 1) Button_val = T_UP_BUTT;
		else if(addr == 2) Button_val = LOCK_BUTT;
		else if(addr == 3) Button_val = DOWN_BUTT;
		else if(addr == 4) Button_val = UP_BUTT;
		
		
		
	}
	else
	{
		if(addr == 0)Button_val &= ~(T_DOWN_BUTT);
		else if(addr == 1) Button_val &= ~(T_UP_BUTT);
		else if(addr == 2) Button_val &= ~(LOCK_BUTT);
		else if(addr == 3) Button_val &= ~(DOWN_BUTT);
		else if(addr == 4) Button_val &= ~(UP_BUTT);
		
	}
	

	if(Button_val != BB)
	{
		BB = Button_val;
		Key_cnt = 0;
	}
	else if(Button_val != 0)
	{
		if(Mod_select)			// test mode
		{
			if(Key_cnt >= LONG_KEY_TIMMING)Key_cnt = LONG_KEY_TIMMING;
			else if(Key_cnt == 20)Real_key = Button_val;
		}
		else 								//standard mode 
		{
			if(Key_cnt >= LONG_KEY_TIMMING)
			{
					if(Button_val != LOCK_BUTT)
					{
						Key_cnt = LONG_KEY_TIMMING - 5;
						Real_key = Button_val;
					}
					else if(Key_cnt == LOCK_TIMMING)
					{
						Real_key = Button_val;
						Key_cnt = LOCK_TIMMING + 1;
					}
			}
			if((Key_cnt == 20) && (Button_val != LOCK_BUTT))Real_key = Button_val;
			
			GPIOB->ODR |= 1<<1;

		}
		Key_cnt++;
	}
	else
	{
		GPIOB->ODR &= ~(1<<1);
		Key_cnt = 0;
		Real_key = 0;
	}
	

	
}

void KKH_74HC595(unsigned char addr, unsigned char number, unsigned char number_2)
{
	unsigned int i=0;
	unsigned temp=0;
	
	
	GPIOA->ODR &= ~(1<<3);	// output_on
	GPIOC->ODR &= ~(1<<5);	// 레치 0
	GPIOD->ODR &= ~(1<<3);	//CLK 로우로 시작
	delay_ms(3);
	
	
	
	if(addr == 4)temp = number;
	else
	{
		if(number & 0x80)
		{
			number &= 0x7F;
			temp = NUMBER_TO_DATA[number] | 0x01;
		}
		else
			temp = NUMBER_TO_DATA[number];
	}	
	

	
	for(i=0; i<8; i++)
	{

		if((temp>>i) & 0x01) GPIOC->ODR |= 1<<6;
		else
			GPIOC->ODR &= ~(1<<6);
		
		GPIOD->ODR |= 1<<3;	//CLK 하이
		delay_ms(3);
		GPIOD->ODR &= ~(1<<3);	//CLK 로우
		delay_ms(3);
		

	}
	

	
	if(addr == 4)temp = number_2;
	else
	{
		if(number_2 & 0x80)
		{
			number_2 &= 0x7F;
			temp = NUMBER_TO_DATA[number_2] | 0x01;
		}
		else
			temp = NUMBER_TO_DATA[number_2];
	
	}
	

	
	for(i=0; i<8; i++)
	{
		
		if((temp>>i) & 0x01) GPIOC->ODR |= 1<<6;
		else
			GPIOC->ODR &= ~(1<<6);
			
		GPIOD->ODR |= 1<<3;	//CLK 하이
		delay_ms(3);
		GPIOD->ODR &= ~(1<<3);	//CLK 로우
		delay_ms(3);	
						
	}

	
	GPIOC->ODR |= 1<<5;	// 레치 1
	GPIOB->ODR = 1<<(3+addr) | (GPIOB->ODR & 0x07);	// LED 그라운드	NOT gate
	
	KKH_KEY(addr);
		
}

void kkh_DIS_Dec(unsigned int data, unsigned int data2)
{
	unsigned int temp=0;

	if(data < 1000)data_temp[3] = 10;
	else
		data_temp[3] = (unsigned char)(data /1000);
	
	if(data<100)data_temp[2] = 10;
	else
	{
		temp = data % 1000;
		data_temp[2] = (unsigned char)(temp / 100);
	}
	if(data<10)data_temp[1] = 10;
	else
	{
		temp = data % 100;
		data_temp[1] = (unsigned char)(temp / 10);
	}
	data_temp[0]= (unsigned char)(data % 10);


	if(data2<1000)data_temp_two[3] = 10;
	else 
		data_temp_two[3] = (unsigned char)(data2 /1000);
		
	if(data2<100)data_temp_two[2] = 10;
	else
	{
		temp = data2 % 1000;
		data_temp_two[2] = (unsigned char)(temp / 100);
	}
	
	if(data2<10)data_temp_two[1] = 10;
	else
	{	
		temp = data2 % 100;
		data_temp_two[1] = (unsigned char)(temp / 10);
	}

	data_temp_two[0]= (unsigned char)(data2 % 10);



	//for(i=0; i <= 3; i++)KKH_74HC595(i,data_temp[i],data_temp_two[i]);
}

void kkh_ALPHA_DIS(unsigned char *Small_display_data, unsigned char *Big_display_data)
{
	unsigned char i=0, j=4;
	unsigned char c=0;
	
	for(i=0; i<4; i++)
	{	
		j--;
		if(Small_display_data[i] >= 'a')buf_small[j] = (Small_display_data[i] - 'a') + 11 + 0x80;
		else if(Small_display_data[i] >= 'A')buf_small[j] = (Small_display_data[i] - 'A') + 11;
		else if(Small_display_data[i] == ' ')buf_small[j] = 10;
		else
			buf_small[j] = Small_display_data[i] - '0';
		
	}
	j=4;
	
	for(i=0; i<4; i++)
	{	
		j--;
		if(Big_display_data[i] >= 'a')buf_big[j] = (Big_display_data[i] - 'a') + 11 + 0x80;
		else if(Big_display_data[i] >= 'A')buf_big[j] = (Big_display_data[i] - 'A') + 11;
		else if(Big_display_data[i] == ' ')buf_big[j] = 10;
		else
			buf_big[j] = Big_display_data[i] - '0';

	}
	
}

void Status_LED(unsigned char on_off, unsigned char data)
{
	if(on_off)LED_disp |= data;
	else
		LED_disp &= ~(data);
}

void Test_action(void)
{
	if(menu_info == 1)
	{
		GPIOB->ODR &= ~(1<<2);                                	//output
		kkh_ALPHA_DIS("REv0","TT7H");
	}
	else if(menu_info == 2)
	{
		if(act == 0)kkh_ALPHA_DIS("TEST","FND ");
		else if(act == 1)
		{
			kkh_ALPHA_DIS("0000","0000");
			Status_LED(ON,LED_ON_DIS+LED_STR_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}
		else if(act == 2)
		{
			kkh_ALPHA_DIS("1111","1111");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_STR_DIS);
		}
		else if(act == 3)
		{
			kkh_ALPHA_DIS("2222","2222");
			Status_LED(ON,LED_ON_DIS+LED_STR_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}
		else if(act == 4)
		{
			kkh_ALPHA_DIS("3333","3333");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_STR_DIS);
		}
		else if(act == 5)
		{
			kkh_ALPHA_DIS("4444","4444");
			Status_LED(ON,LED_ON_DIS+LED_STR_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}
		else if(act == 6)
		{
			kkh_ALPHA_DIS("5555","5555");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_STR_DIS);
		}
		else if(act == 7)
		{
			kkh_ALPHA_DIS("6666","6666");
			Status_LED(ON,LED_ON_DIS+LED_STR_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}
		else if(act == 8)
		{
			kkh_ALPHA_DIS("7777","7777");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_STR_DIS);
		}
		else if(act == 9)
		{
			kkh_ALPHA_DIS("8888","8888");
			Status_LED(ON,LED_ON_DIS+LED_STR_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}
		else if(act == 10)
		{
			kkh_ALPHA_DIS("9999","9999");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_STR_DIS);
		}
		

		if(kkh_test_mode_flag)
		{
			act++;
			if(act > 10)act=1;
			kkh_test_mode_flag = 0;
		}
	}
	else if(menu_info == 3)
	{
		if(act == 0)kkh_ALPHA_DIS("OFDN","KEY ");
		else if(act == 1)kkh_ALPHA_DIS("ONUP","KEY ");
		else if(act == 2)kkh_ALPHA_DIS("ONDN","KEY ");
		else if(act == 3)kkh_ALPHA_DIS("LOCK","KEY ");
		else if(act == 4)kkh_ALPHA_DIS("OFUP","KEY ");
		Status_LED(OFF,LED_ON_DIS+LED_OFF_DIS+LED_STR_DIS);
	}
	else if(menu_info == 4)
	{
		GPIOB->ODR &= ~(1<<2);                                	//output
		if(GPIOA->IDR & 1<<4)                                   //input start
		{
			kkh_ALPHA_DIS("    ","STrL");
			Status_LED(ON,LED_STR_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_OFF_DIS);
		}
		else
		{
			kkh_ALPHA_DIS("    ","STrH");
			Status_LED(OFF,LED_STR_DIS);
			Status_LED(OFF,LED_ON_DIS+LED_OFF_DIS);
		}
	}

	else if(menu_info == 5)
	{
		if(act == 0)
		{
			GPIOB->ODR |= 1<<2;                                   //output
			GPIOB->ODR |= 1<<1;                                   //buzz
			kkh_ALPHA_DIS("    "," rON");
			Status_LED(ON,LED_ON_DIS);
			Status_LED(OFF,LED_OFF_DIS);
		}

		else if(act == 1)
		{
			GPIOB->ODR &= ~(1<<2);                                //output
			GPIOB->ODR &= ~(1<<1);                                //buzz
			kkh_ALPHA_DIS("    ","rOFF");
			Status_LED(ON,LED_OFF_DIS);
			Status_LED(OFF,LED_ON_DIS);
		}

		if(kkh_test_mode_flag)
		{
			act++;
			if(act > 1)act=0;
			kkh_test_mode_flag = 0;
		}
	}

	else if(menu_info == 6)kkh_ALPHA_DIS("GOOD","EEpR");
	
	
}

void pre_button_init(void)
{
	menu_info++;
	act = 0;
	kkh_test_mode_flag = 0;
}

void Menu_select_key(void)
{
		if(menu_info == 3)
		{
			if(Real_key == T_UP_BUTT)act=4;
			else if(Real_key == LOCK_BUTT)act=3;
			else if(Real_key == DOWN_BUTT)act=2;
			else if(Real_key == UP_BUTT)act=1;
		}
		if(Real_key == T_DOWN_BUTT)pre_button_init();
		if(menu_info >= 7)menu_info = 1;
		
		Real_key = 0;
		
		Test_action();
		
}

unsigned char start_rootin(void)
{
	unsigned int start_mode_cnt=0;
	unsigned char mod_sel=0;

	while(1)
	{
		if(Real_key == T_DOWN_BUTT)
		{
			mod_sel = MENU_MOD;
			break;
		}
		
		if(start_mode_cnt >= 60000)
		{
			mod_sel = STD_MOD;
			break;
		}
		start_mode_cnt++;
		
	}
	Real_key = 0;
	
	return mod_sel;
}


unsigned char input_ok_flag;
unsigned int input_cnt;
unsigned int kkh_1sec_cnt;
unsigned char re_flag;


int main(void)
{
	
	unsigned char save_flag=0;
	int before_on_time=0, before_off_time=0;

	
	
	GPIO_setup();
	clock_setup();
	GPIOB->ODR &= ~(1<<2);
	/*
	e2prom read
	on_timer =10;
	off_timer = 5;
	*/
	kkh_DIS_Dec(0 , 0);
	
	Timer3_Set();
	menu_info=1;
	delay_ms(16);
	Mod_select = start_rootin();
	
	
	
	on_timer = 3;
	off_timer = 3;
	real_cnt_on = on_timer;
	real_cnt_off = off_timer;
	
	//kkh_DIS_Dec(off_time_value,on_time_value);

	//Mod_select = 1;
	//Status_LED(ON,LED_ON_DIS+LED_OFF_DIS+LED_STR_DIS);
	//Status_LED(OFF,LED_ON_DIS+LED_OFF_DIS);
	//Status_LED(ON,LED_ON_DIS);
	
	while (1)
	{
		if(Mod_select)Menu_select_key();
		else
		{
			
			//if(on_timer_set_flag)kkh_DIS_Dec(off_timer , on_timer);		// E2P
			if(input_ok_flag == ON)			//input ok
			{
				
				if(re_flag == ON)
				{
					if((on_timer_set_flag != 0) && (before_off_time != off_timer))
					{
						kkh_DIS_Dec(off_timer , real_cnt_on);
						before_on_time = on_timer;
					}
					else
						kkh_DIS_Dec(real_cnt_off , on_timer);
				}
				else
				{
					if((on_timer_set_flag != 0) && (before_on_time != on_timer))
					{
						kkh_DIS_Dec(real_cnt_off , on_timer);
						before_off_time = off_timer;
					}
					else
						kkh_DIS_Dec(off_timer , real_cnt_on);
				}
			}
			else
				kkh_DIS_Dec(real_cnt_off , real_cnt_on);					//image
			
			
			
			if((Real_key != 0) && (Real_key != LOCK_BUTT) && (KEY_LOCK_FLAG == 0))
			{
				if(Real_key == UP_BUTT)
				{
					on_timer++;
					if(on_timer > 9999)on_timer = 0;
				}
				else if(Real_key == DOWN_BUTT)
				{
					on_timer--;
					if(on_timer < 0)on_timer = 9999;
				}
				else if(Real_key == T_UP_BUTT)
				{
					off_timer++;
					if(off_timer > 9999)off_timer = 0;
				}
				else if(Real_key == T_DOWN_BUTT)
				{
					off_timer--;
					if(off_timer < 0)off_timer = 9999;
					
				}
				
				if(input_ok_flag == OFF)
				{
					real_cnt_on = on_timer;
					real_cnt_off = off_timer;
				}
				else
				{
					if(re_flag == ON)real_cnt_on = on_timer;
					else
						real_cnt_off = off_timer;
				}
				
				on_timer_set_flag = 1;
				Real_key = 0;
				
			}
			else if(Real_key == LOCK_BUTT)
			{
				if(KEY_LOCK_FLAG)KEY_LOCK_FLAG=0;
				else
					KEY_LOCK_FLAG = 1;
					
					Real_key = 0;
			}
			
			
			if(input_ok_flag)	// add signal input check
			{
				if(kkh_1sec_cnt >= (SEC_1 + 1))
				{
						kkh_1sec_cnt = ON;
						if((real_cnt_on > 1) && (re_flag == OFF))real_cnt_on--;
						else if((real_cnt_on == 1) && (re_flag == OFF))
						{
							real_cnt_on = on_timer;
							re_flag = ON;
							Status_LED(ON,LED_OFF_DIS);
							Status_LED(OFF,LED_ON_DIS);
							GPIOB->ODR &= ~(1<<2);
						}
						else if((re_flag == ON) && (real_cnt_off > 1))real_cnt_off--;
						else
						{
							real_cnt_off = off_timer;
							save_flag = ON;
							input_ok_flag = OFF;
							kkh_1sec_cnt = 0;
							input_cnt =0;
							re_flag = OFF;
						}
	
						if(save_flag)delay_ms(60000);
				}
			}		
		}
	}
}

/*-----------------------------------------------------------------------------------------------------*/

@far @interrupt void TIM3_UPD_OVF_BRK_IRQHandler(void)
{
	
	if((timer_cnt_kkh % 2)==0)
	{
		
		if(Disp_point ==4)KKH_74HC595(Disp_point, 0, LED_disp);
		else
		{	
			if(Mod_select)KKH_74HC595(Disp_point, buf_small[Disp_point], buf_big[Disp_point]);
			else
				KKH_74HC595(Disp_point, data_temp[Disp_point], data_temp_two[Disp_point]);
			
		}
		
		Disp_point++;
		if(Disp_point >= 5)Disp_point=0;
	}


	if(timer_cnt_kkh >= SEC_1)	timer_cnt_kkh =0;

	
	
	if(kkh_1sec_cnt)kkh_1sec_cnt++;
	if(GPIOA->IDR & 1<<4)input_cnt++;
	else
		input_cnt = 0;
	
	if(input_cnt == SEC_1)
	{
		input_ok_flag = ON;
		kkh_1sec_cnt = ON;
		GPIOB->ODR |= 1<<2;
		Status_LED(ON,LED_ON_DIS);
		Status_LED(OFF,LED_OFF_DIS);
		
	}
	if(input_cnt >= 2000)input_cnt=2000;
	
	
	
	
	
	if(Mod_select)
	{
		if((timer_cnt_kkh % 500)==0)kkh_test_mode_flag = ON;
	}
	else
	{
		if(on_timer_set_flag)on_timer_set_flag++;
		if(on_timer_set_flag>= SEC_1)on_timer_set_flag = OFF;
	}
	
	
	
	
	
	
	timer_cnt_kkh++;

	
	
	TIM3->SR1 = 0xFE;//인터럽트 플레이그 클리어	

}






